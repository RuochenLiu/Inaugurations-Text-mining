dt.p <- dt.m
Democratic <- c("Andrew Jackson", "Martin van Buren", "James K. Polk", "Franklin Pierce", "James Buchanan", "Grover Cleveland - I", "Grover Cleveland - II", "Woodrow Wilson", "Franklin D. Roosevelt", "Harry S. Truman", "John F. Kennedy", "Lyndon B. Johnson", "Jimmy Carter", "William J. Clinton", "Barack Obama")
Republican <- c("Abraham Lincoln", "Ulysses S. Grant", "Rutherford B. Hayes", "James Garfield", "Benjamin Harrison", "William McKinley", "Theodore Roosevelt", "William Howard Taft", "Warren G. Harding", "Calvin Coolidge", "Herbert Hoover", "Dwight D. Eisenhower", "Richard Nixon", "Ronald Reagan", "George Bush", "George W. Bush", "Donald J. Trump")
Whig <- c("William Henry Harrison", "Zachary Taylor")
Democratic.Republican.Party <- c("Thomas Jefferson", "James Madison", "James Monroe", "John Quincy Adams")
N <- c("George Washington")
# Column Combined by Party
nc <- ncol(dt.m) # Use the former matirx
dt.p <- dt.m
Democratic <- c("Andrew Jackson", "Martin van Buren", "James K. Polk", "Franklin Pierce", "James Buchanan", "Grover Cleveland - I", "Grover Cleveland - II", "Woodrow Wilson", "Franklin D. Roosevelt", "Harry S. Truman", "John F. Kennedy", "Lyndon B. Johnson", "Jimmy Carter", "William J. Clinton", "Barack Obama")
Republican <- c("Abraham Lincoln", "Ulysses S. Grant", "Rutherford B. Hayes", "James Garfield", "Benjamin Harrison", "William McKinley", "Theodore Roosevelt", "William Howard Taft", "Warren G. Harding", "Calvin Coolidge", "Herbert Hoover", "Dwight D. Eisenhower", "Richard Nixon", "Ronald Reagan", "George Bush", "George W. Bush", "Donald J. Trump")
Whig <- c("William Henry Harrison", "Zachary Taylor")
Democratic.Republican.Party <- c("Thomas Jefferson", "James Madison", "James Monroe", "John Quincy Adams")
N <- c("George Washington")
Fedralist <- c("John Adams")
for (i in 1:nc) {
if(colnames(dt.p)[i] %in% Democratic){
colnames(dt.p)[i] <- "Democratic"
}
if(colnames(dt.p)[i] %in% Republican){
colnames(dt.p)[i] <- "Republican"
}
if(colnames(dt.p)[i] %in% Whig){
colnames(dt.p)[i] <- "Whig"
}
if(colnames(dt.p)[i] %in% N){
colnames(dt.p)[i] <- "NA"
}
if(colnames(dt.p)[i] %in% Fedralist){
colnames(dt.p)[i] <- "Fedralist"
}
if(colnames(dt.p)[i] %in% Democratic.Republican.Party){
colnames(dt.p)[i] <- "Democratic-Republican Party"
}
}
nm <- colnames(dt.p)
dt.p <- dt.p %*% sapply(unique(nm),"==", nm)
View(dt.p)
# Column Combined by Party
nc <- ncol(dt.m) # Use the former matirx
dt.p <- dt.m
Democratic <- c("AndrewJackson", "MartinvanBuren", "JamesKPolk", "FranklinPierce", "JamesBuchanan", "GroverCleveland-I", "GroverCleveland-II", "WoodrowWilson", "FranklinDRoosevelt", "HarrySTruman", "JohnFKennedy", "LyndonBJohnson", "JimmyCarter", "WilliamJClinton", "BarackObama")
Republican <- c("AbrahamLincoln", "UlyssesSGrant", "RutherfordBHayes", "JamesGarfield", "BenjaminHarrison", "WilliamMcKinley", "TheodoreRoosevelt", "WilliamHowardTaft", "WarrenGHarding", "CalvinCoolidge", "HerbertHoover", "DwightDEisenhower", "RichardNixon", "RonaldReagan", "GeorgeBush", "GeorgeWBush", "DonaldJTrump")
Whig <- c("WilliamHenryHarrison", "ZacharyTaylor")
Democratic.Republican.Party <- c("ThomasJefferson", "JamesMadison", "JamesMonroe", "JohnQuincyAdams")
N <- c("GeorgeWashington")
Fedralist <- c("JohnAdams")
for (i in 1:nc) {
if(colnames(dt.p)[i] %in% Democratic){
colnames(dt.p)[i] <- "Democratic"
}
if(colnames(dt.p)[i] %in% Republican){
colnames(dt.p)[i] <- "Republican"
}
if(colnames(dt.p)[i] %in% Whig){
colnames(dt.p)[i] <- "Whig"
}
if(colnames(dt.p)[i] %in% N){
colnames(dt.p)[i] <- "NA"
}
if(colnames(dt.p)[i] %in% Fedralist){
colnames(dt.p)[i] <- "Fedralist"
}
if(colnames(dt.p)[i] %in% Democratic.Republican.Party){
colnames(dt.p)[i] <- "Democratic-Republican Party"
}
}
nm <- colnames(dt.p)
dt.p <- dt.p %*% sapply(unique(nm),"==", nm)
View(dt.p)
#Comparison CLoud
png(paste("Sample_Comparison_President",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.m, scale=c(5,0.5), max.words=800, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by President")
dev.off()
png(paste("Sample_Comparison_Party",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.p, scale=c(5,0.5), max.words=800, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by Party")
dev.off()
#Comparison CLoud
png(paste("Sample_Comparison_President",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.m, scale=c(5,0.5), max.words=800, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by President")
dev.off()
png(paste("Sample_Comparison_Party",".png", sep = ""), width = 1000, height = 1000 )
comparison.cloud(dt.p, scale=c(5,0.5), max.words=200, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by Party")
dev.off()
#Comparison CLoud
png(paste("Sample_Comparison_President",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.m, scale=c(5,0.5), max.words=800, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by President")
dev.off()
png(paste("Sample_Comparison_Party",".png", sep = ""), width = 1500, height = 1500 )
comparison.cloud(dt.p, scale=c(5,0.5), max.words=200, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by Party")
dev.off()
#Comparison CLoud
png(paste("Sample_Comparison_President",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.m, scale=c(5,0.5), max.words=800, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by President")
dev.off()
png(paste("Sample_Comparison_Party",".png", sep = ""), width = 1800, height = 1800 )
comparison.cloud(dt.p, scale=c(5,0.5), max.words=200, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by Party")
dev.off()
#Comparison CLoud
png(paste("Sample_Comparison_President",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.m, scale=c(5,0.5), max.words=800, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by President")
dev.off()
png(paste("Sample_Comparison_Party",".png", sep = ""), width = 1800, height = 1800 )
comparison.cloud(dt.p, scale=c(5,0.5), max.words=400, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by Party")
dev.off()
#Commonality CLoud
png(paste("Sample_Commonality",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.m,random.order=FALSE, random.color = TRUE)
title(main = "Sample_Commonality_President")
dev.off()
png(paste("Sample_Commonality",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.p)
title(main = "Sample_Commonality_Party")
dev.off()
#Commonality CLoud
png(paste("Sample_Commonality_President",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.m,random.order=FALSE, random.color = TRUE)
title(main = "Sample_Commonality_President")
dev.off()
png(paste("Sample_Commonality_Party",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.p)
title(main = "Sample_Commonality_Party")
dev.off()
#Commonality CLoud
png(paste("Sample_Commonality_President",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.m,random.order=FALSE, random.color = TRUE)
title(main = "Sample_Commonality_President", random.order=FALSE, colors = brewer.pal(8, "Dark2"))
dev.off()
png(paste("Sample_Commonality_Party",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.p)
title(main = "Sample_Commonality_Party", random.order=FALSE, colors = brewer.pal(8, "Dark2"))
dev.off()
#Commonality CLoud
png(paste("Sample_Commonality_President",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.m,random.order=FALSE, random.color = TRUE)
title(main = "Sample_Commonality_President", random.order=FALSE,
colors = brewer.pal(8, "Dark2"))
dev.off()
png(paste("Sample_Commonality_Party",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.p)
title(main = "Sample_Commonality_Party", random.order=FALSE,
colors = brewer.pal(8, "Dark2"))
dev.off()
#Commonality CLoud
png(paste("Sample_Commonality_President",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.m, random.order = FALSE, random.order=FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_President")
dev.off()
png(paste("Sample_Commonality_Party",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.p, random.order=FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_Party")
dev.off()
#Commonality CLoud
png(paste("Sample_Commonality_President",".png", sep = ""), width = 1000, height = 1000 )
commonality.cloud(dt.m, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_President")
dev.off()
png(paste("Sample_Commonality_Party",".png", sep = ""), width = 500, height = 500 )
commonality.cloud(dt.p, random.order=FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_Party")
dev.off()
#Commonality CLoud
png(paste("Sample_Commonality_President",".png", sep = ""), width = 300, height = 300 )
commonality.cloud(dt.m, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_President")
dev.off()
png(paste("Sample_Commonality_Party",".png", sep = ""), width = 500, height = 500 )
commonality.cloud(dt.p, random.order=FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_Party")
dev.off()
#Commonality CLoud
png(paste("Sample_Commonality_President",".png", sep = ""), width = 300, height = 300 )
commonality.cloud(dt.m, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_President")
dev.off()
png(paste("Sample_Commonality_Party",".png", sep = ""), width = 300, height = 300 )
commonality.cloud(dt.p, random.order=FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_Party")
dev.off()
#Commonality CLoud
png(paste("Sample_Commonality_President",".png", sep = ""), width = 500, height = 500 )
commonality.cloud(dt.m, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_President")
dev.off()
png(paste("Sample_Commonality_Party",".png", sep = ""), width = 800, height = 800 )
commonality.cloud(dt.p, random.order=FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_Party")
dev.off()
#Comparison CLoud
png(paste("Sample_Comparison_President",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.m, scale=c(5,0.5), max.words=800, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by President")
dev.off()
png(paste("Sample_Comparison_Party",".png", sep = ""), width = 1800, height = 1800 )
comparison.cloud(dt.p, scale=c(5,0.5), max.words=400, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by Party")
dev.off()
?comparison.cloud
#Comparison CLoud
png(paste("Sample_Comparison_President",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.m, scale=c(5,0.5), max.words=800, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by President")
dev.off()
png(paste("Sample_Comparison_Party",".png", sep = ""), width = 1800, height = 1800 )
comparison.cloud(dt.p, scale=c(5,0.5), max.words=300, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by Party")
dev.off()
b <- apply(dt.p, scale, 2)
b <- apply(dt.p, 2， scale)
comparison.cloud(b, scale=c(5,0.5), max.words=300, min.freq=1, random.color = FALSE)
b <- apply(dt.p, 2， scale)
png(paste("B",".png", sep = ""), width = 800, height = 800 )
commonality.cloud(b, random.order=FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_Party")
dev.off()
install.packages("sentimentr")
require(devtools)
install_url("http://cran.r-project.org/src/contrib/Archive/sentiment/sentiment_0.2.tar.gz")
# Column Combined by Party
nc <- ncol(dt.m) # Use the former matirx
dt.p <- dt.m
Democratic <- c("AndrewJackson", "MartinvanBuren", "JamesKPolk", "FranklinPierce", "JamesBuchanan", "GroverCleveland-I", "GroverCleveland-II", "WoodrowWilson", "FranklinDRoosevelt", "HarrySTruman", "JohnFKennedy", "LyndonBJohnson", "JimmyCarter", "WilliamJClinton", "BarackObama")
Republican <- c("AbrahamLincoln", "UlyssesSGrant", "RutherfordBHayes", "JamesGarfield", "BenjaminHarrison", "WilliamMcKinley", "TheodoreRoosevelt", "WilliamHowardTaft", "WarrenGHarding", "CalvinCoolidge", "HerbertHoover", "DwightDEisenhower", "RichardNixon", "RonaldReagan", "GeorgeBush", "GeorgeWBush", "DonaldJTrump")
Whig <- c("WilliamHenryHarrison", "ZacharyTaylor")
Democratic.Republican.Party <- c("ThomasJefferson", "JamesMadison", "JamesMonroe", "JohnQuincyAdams")
N <- c("GeorgeWashington")
Fedralist <- c("JohnAdams")
Other <- c("WilliamHenryHarrison", "ZacharyTaylor", "ThomasJefferson", "JamesMadison", "JamesMonroe", "JohnQuincyAdams", "GeorgeWashington", "JohnAdams")
for (i in 1:nc) {
if(colnames(dt.p)[i] %in% Democratic){
colnames(dt.p)[i] <- "Democratic"
}
if(colnames(dt.p)[i] %in% Republican){
colnames(dt.p)[i] <- "Republican"
}
#  if(colnames(dt.p)[i] %in% Whig){
#    colnames(dt.p)[i] <- "Whig"
#  }
#  if(colnames(dt.p)[i] %in% N){
#    colnames(dt.p)[i] <- "NA"
#  }
#  if(colnames(dt.p)[i] %in% Fedralist){
#   colnames(dt.p)[i] <- "Fedralist"
#}
#if(colnames(dt.p)[i] %in% Democratic.Republican.Party){
# colnames(dt.p)[i] <- "Democratic-Republican Party"
#}
if(colnames(dt.p)[i] %in% Other){
colnames(dt.p)[i] <- "Other"
}
}
nm <- colnames(dt.p)
dt.p <- dt.p %*% sapply(unique(nm),"==", nm)
View(dt.p)
#Comparison CLoud
png(paste("Sample_Comparison_President",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.m, scale=c(5,0.5), max.words=800, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by President")
dev.off()
png(paste("Sample_Comparison_Party",".png", sep = ""), width = 1800, height = 1800 )
comparison.cloud(dt.p, scale=c(5,0.5), max.words=300, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by Party")
dev.off()
#Commonality CLoud
png(paste("Sample_Commonality_President",".png", sep = ""), width = 500, height = 500 )
commonality.cloud(dt.m, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_President")
dev.off()
png(paste("Sample_Commonality_Party",".png", sep = ""), width = 800, height = 800 )
commonality.cloud(dt.p, random.order=FALSE, colors = brewer.pal(8, "Dark2"))
title(main = "Sample_Commonality_Party")
dev.off()
#Comparison CLoud
png(paste("Sample_Comparison_President",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.m, scale=c(5,0.5), max.words=Inf, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by President")
dev.off()
png(paste("Sample_Comparison_Party",".png", sep = ""), width = 1800, height = 1800 )
comparison.cloud(dt.p, scale=c(5,0.5), max.words=Inf, min.freq=1, random.color = FALSE)
title(main = "Sample Comparision by Party")
dev.off()
#KCluster
temp <- scale(as.data.frame(inspect(dtm))) # Hclust should be applied to dtm
d <- dist(temp, method = "euclidean")
fit <- hclust(d, method = "ward.D")
png(paste("HCluster",".png", sep = ""), width = 1500, height = 1000 )
plot(fit)
rect.hclust(fit,k=10)
dev.off()
# WordCloud
wordcloud(dtm.overall$term, dtm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
wordcloud(dtm_tf.tidy$term[dtm_tf.tidy$document == speeches[1]], dtm_tf.tidy$count[dtm_tf.tidy$document == speeches[1]],
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
wordcloud(dtm_tf.tidy$term[dtm_tf.tidy$document == speeches[1]], dtm_tf.tidy$count[dtm_tf.tidy$document == speeches[1]],
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
wordcloud(dtm_tf.tidy$term[dtm_tf.tidy$document == speeches[1]], dtm_tf.tidy$count[dtm_tf.tidy$document == speeches[1]],
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
# Import data
folder.path="../data/InauguralSpeeches/"
speeches = list.files(path = folder.path, pattern = "*.txt") # Get the txt files.
nms = substr(speeches, 6, nchar(speeches)-4) # Get the name of speeches.
length.speeches=rep(NA, length(speeches))
inaug <- Corpus(DirSource(folder.path)) # Read speeches
inaug <- tm_map(inaug, stripWhitespace) # Clean text data
inaug <- tm_map(inaug, content_transformer(tolower))
inaug <- tm_map(inaug, removeWords, stopwords("english"))
inaug <- tm_map(inaug, removeWords, character(0))
inaug <- tm_map(inaug, removePunctuation)
dtm <- DocumentTermMatrix(inaug) # Create normal Document-Term matrix
dtm_tf <- DocumentTermMatrix(inaug, control = list(weighting =function(x) weightTfIdf(x, normalize = FALSE), stopwords = TRUE)) # Create TF-IDF Document-Term matirx
dtm$dimnames$Docs <- nms
dtm_tf$dimnames$Docs <- nms # Clean the doc names
tdm <- TermDocumentMatrix(inaug)
tdm_tf <- TermDocumentMatrix(inaug, control = list(weighting =function(x) weightTfIdf(x, normalize = FALSE), stopwords = TRUE))
tdm$dimnames$Docs <- nms # Clean the doc names
tdm_tf$dimnames$Docs <- nms
dtm.tidy <- tidy(dtm) # Get tidy matrix
dtm_tf.tidy <- tidy(dtm_tf)
tdm.tidy <- tidy(tdm)
tdm_tf.tidy <- tidy(tdm_tf)
dtm.overall <- summarise(group_by(dtm.tidy, term), sum(count))
dt <- tdm # With shorter name
dt$dimnames$Docs <- substr(nms, 1, nchar(nms)-2)
# WordCloud
wordcloud(dtm.overall$term, dtm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
wordcloud(dtm_tf.tidy$term[dtm_tf.tidy$document == speeches[1]], dtm_tf.tidy$count[dtm_tf.tidy$document == speeches[1]],
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
#KCluster
temp <- scale(as.data.frame(inspect(dtm))) # Hclust should be applied to dtm
d <- dist(temp, method = "euclidean")
fit <- hclust(d, method = "ward.D")
png(paste("HCluster",".png", sep = ""), width = 1500, height = 1000 )
plot(fit)
rect.hclust(fit,k=10)
dev.off()
wordcloud(dtm_tf.tidy$term[dtm_tf.tidy$document == speeches[1]], dtm_tf.tidy$count[dtm_tf.tidy$document == speeches[1]],
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
```
View(dtm_tf.tidy)
wordcloud(dtm.overall$term, dtm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
# WordCloud
wordcloud(dtm.overall$term, dtm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
wordcloud(dtm_tf.tidy$term[dtm_tf.tidy$document == speeches[1]], dtm_tf.tidy$count[dtm_tf.tidy$document == speeches[1]],
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
View(dt.overall)
View(dtm.overall)
View(dtm_tf.tidy)
#Comparison CLoud
png(paste("Sample_Comparison_President",".png", sep = ""), width = 2000, height = 2000 )
comparison.cloud(dt.m, scale=c(5,0.5), max.words=Inf, min.freq=10, random.color = FALSE)
title(main = "Sample Comparision by President")
dev.off()
png(paste("Sample_Comparison_Party",".png", sep = ""), width = 1800, height = 1800 )
comparison.cloud(dt.p, scale=c(5,0.5), max.words=Inf, min.freq=10, random.color = FALSE)
title(main = "Sample Comparision by Party")
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
# Import data
folder.path="../data/InauguralSpeeches/"
speeches = list.files(path = folder.path, pattern = "*.txt") # Get the txt files.
nms = substr(speeches, 6, nchar(speeches)-4) # Get the name of speeches.
length.speeches=rep(NA, length(speeches))
inaug <- Corpus(DirSource(folder.path)) # Read speeches
inaug <- tm_map(inaug, stripWhitespace) # Clean text data
inaug <- tm_map(inaug, content_transformer(tolower))
inaug <- tm_map(inaug, removeWords, stopwords("english"))
inaug <- tm_map(inaug, removeWords, character(0))
inaug <- tm_map(inaug, removePunctuation)
dtm <- DocumentTermMatrix(inaug) # Create normal Document-Term matrix
dtm_tf <- DocumentTermMatrix(inaug, control = list(weighting =function(x) weightTfIdf(x, normalize = FALSE), stopwords = TRUE)) # Create TF-IDF Document-Term matirx
dtm$dimnames$Docs <- nms
dtm_tf$dimnames$Docs <- nms # Clean the doc names
tdm <- TermDocumentMatrix(inaug)
tdm_tf <- TermDocumentMatrix(inaug, control = list(weighting =function(x) weightTfIdf(x, normalize = FALSE), stopwords = TRUE))
tdm$dimnames$Docs <- nms # Clean the doc names
tdm_tf$dimnames$Docs <- nms
dtm.tidy <- tidy(dtm) # Get tidy matrix
dtm_tf.tidy <- tidy(dtm_tf)
tdm.tidy <- tidy(tdm)
tdm_tf.tidy <- tidy(tdm_tf)
dtm.overall <- summarise(group_by(dtm.tidy, term), sum(count))
dt <- tdm # With shorter name
dt$dimnames$Docs <- substr(nms, 1, nchar(nms)-2)
# WordCloud
wordcloud(dtm.overall$term, dtm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
wordcloud(dtm_tf.tidy$term[dtm_tf.tidy$document == speeches[1]], dtm_tf.tidy$count[dtm_tf.tidy$document == speeches[1]],
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
View(dtm_tf.tidy)
# WordCloud
wordcloud(dtm.overall$term, dtm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
wordcloud(dtm_tf.tidy$term[dtm_tf.tidy$document == nms[1]], dtm_tf.tidy$count[dtm_tf.tidy$document == nms[1]],
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Greens"))
tdm$dimnames$Docs
